#!/usr/bin/env fish

argparse -n homestead -s "h/help" "u" "no-cwd" "shell" -- $argv
or exit 1

set homesteads /home/steads

if set -q _flag_help
    echo "\
Usage: homestead [OPTIONS] NAME [COMMAND...]

Isolate changes to your home directory.

Runs a command in a named sandbox. Everything in the current working directory
is writeable as normal, but any changes to other files in your home directory
are stored in an overlay specific to the homestead.

If COMMAND is not specified, an interactive shell is started.

The homestead overlay is stored in $homesteads.

Options:
  --no-cwd      don't pass the current directory through the sandbox
  -u            unmount & cleanup instead of entering
  -h, --help    show this help text"
    exit
end

if set -q SUDO_USER
    set USER $SUDO_USER
    set HOME ~$USER
end

set name $argv[1]
set upperdir $homesteads/$USER/$name

# Shell launcher
if set -q _flag_shell
    echo "Starting shell in homestead '$name' - type ctrl-d or 'exit' to leave"
    echo "(Overlay stored at $upperdir)"
    switch (basename $SHELL)
    case fish
        exec $SHELL -i --init-command='
            functions --copy fish_prompt __homestead_orig_prompt
            function fish_prompt
                echo -n "($HOMESTEAD) "
                __homestead_orig_prompt
            end
        '
    case bash
        set temp (mktemp)
        echo "
            rm $temp
            test -f \$HOME/.bashrc && source \$HOME/.bashrc
            PS1=\"(\$HOMESTEAD) \$PS1\"
        " > $temp
        exec $SHELL -i --init-file $temp
    case '*'
        exec $SHELL
    end
end

function _fail_close
    echo "error: Could not clean up homestead '$name'!"
    echo "Close any open files inside and run 'homestead -u $name'"
end

function close_homestead
    # This function can succeed even if the sandbox is still active, because
    # the bind mount of .merged still exists in the sandbox. From testing,
    # this appears to be safe; surviving processes cannot write to any files,
    # and starting another sandbox doesn't affect that (so we won't be clashing
    # workdirs.)
    if mountpoint -q $upperdir.merged
        umount $upperdir.merged
        or _fail_close && return 1
    end
    if test -d $upperdir.merged
        rmdir $upperdir.merged
        or _fail_close && return 1
    end
    if test -d $upperdir.work
        rm -r $upperdir.work
        or _fail_close && return 1
    end
    return 0
end

if set -q _flag_u
    close_homestead
    exit $status
end

if mountpoint -q $upperdir.merged
    echo "error: homestead already active"
    exit 1
end

if test ! -d $homesteads
or test ! -w $homesteads
    echo "error: Cannot access directory $homesteads"
    echo "Please ensure it exists and is writeable"
    exit 1
end

if test (count $argv) -gt 1
    set run_command $argv[2..]
else
    set run_command (status current-filename) --shell $name
end

if which fuse-overlayfs >/dev/null 2>&1
    set overlayfs fuse-overlayfs
else
    set overlayfs mount -t overlay overlay
end

set cwd (pwd)
if set -q _flag_no_cwd
    set mount_cwd
else
    set mount_cwd --bind $cwd $cwd
end

function finish -e fish_exit
    close_homestead
end

mkdir -p $upperdir{,.work,.merged}
and chmod 700 $homesteads/$USER
and chown $USER:$USER $homesteads/$USER $upperdir{,.work,.merged}
or exit 1

$overlayfs -o lowerdir=$HOME,upperdir=$upperdir,workdir=$upperdir.work $upperdir.merged
or exit 1

sudo -u $USER bwrap \
    --setenv HOMESTEAD $name \
    # New pid ns to ensure all processes remain children of bwrap
    --unshare-pid \
    --bind / / \
    --dev-bind /dev /dev \
    --bind /tmp /tmp \
    --bind $upperdir.merged $HOME \
    $mount_cwd \
    $run_command
